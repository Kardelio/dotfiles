while read -r line ; do
	echo "$line"
done < <(echo -e "abc \n def \n poi \n 123")
	- Loop round each line of output result from previous command

git log | grep -E "Merged in MAS-8.."
	- check git log for merged in items starting with 8
du -shc *
	- measure all items in folder with disk usage including a total -c
tmux -
	<prefix> + % - make new pane to side
	<prefix> + " - make new pane below
	<prefix> + t - shows time in current pane
	<prefix> + c - creates a brand new window
	<prefix> + z - toggles zoom of pane, temp fullscreen 'Z' in bar to show zoomed
	<prefix> + f - find panes in find view
	<prefix> + d - detach from session
	<prefix> + p - switch between windows in current session
	https://gist.github.com/MohamedAlaa/2961058
read var
	- echo "$var" 
	- user input

echo "abcd" | shasum -a 512
	- shasum checksum
sudo osascript -e "set Volume 0"
	- set mac volume to 0

git diff-tree --no-commit-id --name-only -r bd61ad98
	- Nice way of seeing the actual modifications to files in git commit
	- M A D etc...

RX Help-
Map - Receives each emission of the Obs and changes the format of data, so transform item bu applying a function to each item.
Just - Just emit this one thing as a stream
Filter - disposes of some information, it filters, based on the preds
Subject - liek a observable 
Scan - takes 2 params, basically eits an initial value applies a function to that vlue
CombineLatest
zip - only emits when has pair of data
distinct - no repeting values
delaySubscription - VERY different from delay
takeutil - do observerable emmision until another observable fires
interval - outputs at a rate and outputs a counting number
distinctUntilChnaged - for basically checked last thing isnt the same as this emitting
throttleFirst - add a time throttle to stream ignoring things outside fo the time zone
retry() - number of times to retry plus predicate for saying "when this is ok do a retyr"

adb shell am start -W -a android.intent.action.VIEW -d "https://play.google.com/store/apps/details?id=uk.co.very.myvery"
	- -W is wait for launch to complete
	- -d is the data
	- -a is the action
	- Fire implicit intent into device

MACOS - pmset -g batt
	- Gets battery power for mac os

http://www.endmemo.com/unicode/unicodeconverter.php
	- awesome converter for ascii, unicode, hex character

echo "█" | hexdump
	- then take the 3 bits before the 0a
	and put into echo -e '\x__\x__\x__'
	block is: E2 96 88 
	echo -e '\xE2\x96/x88' 

gx
	- in vim opens links
	OMG

if [[ "$locationOfBuild" =~ .*".apk".* ]]; then
	- regex if statement with bash

git diff -- **/REGEX*
	: Git diff without the full path to the file		

python -m pip install <package>
	- Use python 3 to install with pip (multiple python versions)

ln -s _original_ new_file
	-Symbolic link

g++ -std=c++11
	- use c++ 11 specifically

git squash !!! VERY IMPORTANT
	- git squashing is done as follows
git rebase -i HEAD~n
e.g. git rebase -i HEAD~3  = = squash last 3 commits (can also use a hash)
then in editor keep the top (oldest) one to be pick and edit the others to be squash
save and close then the second editor appreance will ask about the commit message
use the provided space to delete the combined messages and your own (otpional)
	- git rebase -i HEAD~3

Bash string manipulation cheatsheet
Assignment
Assign value to variable if variable is not already set. Value will be returned.

Couple with : no-op if return value is to be discarded.	${variable="value"}
: ${variable="value"}
Removal
Delete shortest match of needle from front of haystack	${haystack#needle}
Delete longest match of needle from front of haystack	${haystack##needle}
Delete shortest match of needle from back of haystack	${haystack%needle}
Delete longest match of needle from back of haystack	${haystack%%needle}
Replacement
Replace first match of needle with replacement from haystack	${haystack/needle/replacement}
Replace all matches of needle with replacement from haystack	${haystack//needle/replacement}
If needle matches front of haystack replace with replacement	${haystack/#needle/replacement}
If needle matches back of haystack replace with replacement	${haystack/%needle/replacement}
Substitution
If variable not set, return value, else variable	${variable-value}
If variable not set or empty, return value, else variable	${variable:-value}
If variable set, return value, else null string	${variable+value}
If variable set and not empty, return value, else null string	${variable:+value}
Extraction
Extract length characters from variable starting at position	${variable:position:length}
String length of variable	${#variable}
	- String manipulation

echo "3.3/4.2" | bc -l
	- gives output of decimal calculation in long format
	- echo "scale=2; 100/3" | bc
			-gives output to 2 dp

find . -name "*.apk"
	- find from this folder down an apk

if [[ ! -z "$var" ]]; then
	// --if variable is not empty !
fi

grep -r "pattern" 
	- searches for string in folder and all files.

echo "test" | shasum -a 256
	- ALSO WITH FILE: shasum {file} -a 256    ... takes a little longer

C++ compiling issue
symbole errors in arch
	- gcc main.cpp -o main -lstdc++
	- OR just use
	- g++ main.cpp -o main

Add just untracked files
	- git add -i
	- followed by a, followed by *, followed by q
	- git stash --include-untracked  is awesome too

gradle init --type=kotlin-application
	- set up a kotlin application

:%s/foo/bar/g
Find each occurrence of 'foo' (in all lines), and replace it with 'bar'.
:s/foo/bar/g
Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'.
:%s/foo/bar/gc
Change each 'foo' to 'bar', but ask for confirmation first.
Also use 'a' for yes to ALL
FINALL you can use regex
:%s/[a-z]/t/gc
	- find and replace

git push origin --delete BRANCH_NAME
	-delets branch from remote

git stash save "Specifc note or message"
	- saves stash with specific tag
git stash list
git stash show stash@{1}
git stash show -p stash@{1}
	- show with diffs
git stash clear
	- deltes all stash

sudo ifconfig en0 up
sudo ifconfig en0 down
	- Turn wifi on and off for things
	- pi uses wlan0 instead

kill %1
	-kill bg job number 1

SHIFT + OPTION + F     - VSCode Auto Format

docker rm $(docker ps -a -q)
	- Removes all docker containers
	- allows name reuse etc...

zip and unzip
	- encrypt file
		= zip -e DESTINATION file_or_folder
	- decrypt
		= unzip ZIPPED_FILE
	- folder
		= zip -er DEST folder

!:1
	- gets the first arguement from the last command
	- e.g. !:3 gets the 3rd arguement from the last command


adb shell settings put global window_animation_scale 0.0
adb shell settings put global transition_animation_scale 0.0
adb shell settings put global animator_duration_scale 0.0
	- Set animations to off...
	- DOESNT WORK forget it

curl cheat.sh
curl cheat.sh/bash/while+loop
	- loads bash cheatsheet 
	- find specific queries about language
 echo -e '\x2f'
 	- echos out using hex value (hexdump -C)
 
 adb shell pm list package -3 | grep vector | cat -vet
 	- See its carriage return at the end ^M
	- use: to remove
	tr -d '\r'
 
 while read -r line; do
    printf '%s\n' "$line"
done < "file"
	- read over the contents of a file line by line

 grep -nr 'ben' .
 	- looks a in directory for a specific word
	- and displays line number and recursively seraches down too
 
 ./repeat &>templog &
 	- run process in background and pipe output to a file
	- can also be to /dev/null
	- You can use fg 1 to get back the process to the foreground
 
 trap function_name SIGINT
 or
 trap function_name 1 2 3 6
 	- traps interupts and triggers function
	- function must be declared before hand and also include an exit
 
 https://stackoverflow.com/questions/11880070/how-to-run-a-script-as-root-in-jenkins
 	-Jenkins and Sudo

 curl -H "Content-Type:application/json" -X POST -d '{"name":"ben"}' http://rest.learncode.academy/api/timber/gather
 	- Awesome free json API tester..
	-with curl .
 
 #!/bin/bash
input="/path/to/txt/file"
while IFS= read -r var
do
  echo "$var"
done < "$input"
	- Read in a file line by line
 
 rm file || { echo 'Could not delete file!' >&2; exit 1; }
 	- Safe rm with exit code example

grep -R "Hello World" *
grep -rn . -e "Hello World"
	- Search all files in this dir for a string

if [[ $PATH =~ "ben" ]]; then echo "yrs"; else echo "no"; fi
	- if path contains link to ben_scripts
	- regex bash if statement

https://github.com/chubin/cheat.sh
	- Ultimate programming cheat sheet
	- e.g.
	- curl cheat.sh/js/1line
	- curl cht.sh

ln -s ../Documents/bashfun/scopeTest scopeHelper
	- create a symbolic link the left exists already
	- the right is a brand new file

http://www.falstad.com/circuit/circuitjs.html
	- Amazing electronics online tester

set -x
BASH CODE
set +x
	- sets tracing in bash
	- ALSO export PS4='$LINENO + ' (PS4 is the tracing)

{} - number of times
	- '^[0-9]{3}' = 3 nums in row
? - zero or one
* - zero or more
+ - one or more
	regex tip

>&2
	- writes to stderr

printf '   dfsdfds \n'
	 - uses the new line correctlu
	 - use '"'"' these 5 characters in the case of escaping a single quote

var out = "";
$("[data-clipboard-text]").each(function(){
			var orte = this.innerText;
				var name = orte.replace("COPY","");
					var col = this.getAttribute("data-clipboard-text");
						console.log(name + " : " + col);
							out += name + " : " + col + "\n";
});
console.log(out);
	- Went to a website and scrapped out the names of colour and the colour code iteself

/* 
RED : #F44336
PINK : #E91E63
PURPLE : #9C27B0
DEEP PURPLE : #673AB7
INDIGO : #3F51B5
BLUE : #2196F3
LIGHT BLUE : #03A9F4
CYAN : #00BCD4
TEAL : #009688
GREEN : #4CAF50
LIGHT GREEN : #8BC34A
LIME : #CDDC39
YELLOW : #FFEB3B
AMBER : #FFC107
ORANGE : #FF9800
DEEP ORANGE : #FF5722
BROWN : #795548
GREY : #9E9E9E
BLUE GREY : #607D8B
*/
	- web colours , material colours

adb shell input keyevent KEYCODE_WAKEUP
	- Wake up sleeping andorid phone

sh jirase.sh | jq '.issues[0].key'
GET JSON | jq '.total'
	- e.g. { total: 6, other: 5} = 6

throw new RuntimeException("This is a crash");
	- java throw specific exception

\ls
	- runs ls without alias
	- use the back slash to run any command without alias

find . -name "*20180510*" -exec cp {} test \;
	- find all files with that name and carries out
	- exec command of cp {} - means each file
	- and the \ means one at a time, a + would be all at once

USE purgeGits followed by git fetch -p
	-cleans up all local branches followed by removing remote trackers for branches that dont exist

~/Documents/xhr.js
	- Contains example request without jquery

CMD+SHIFT+v   in VSCode for HTML preview
CMD+K V		  in VSCode for side preview
SHIFT+OPTION+F in VSCode to auto format JSON

git checkout HEAD^
	- get previous commit active
git checkout master
	- fix dettached head

kotlinc main.kt
kotlin MainKt
	- compile and run kotlin code

open -a "Google Chrome" index.html 
	- open google chrome with this file
open -a /App.... http://www.bbc.co.uk
	- open chrome to site

gron version.json | grep nickname | sed 's/.*"\(.*\)".*/\1/'
	- grons out the json to greppable stdout, grep to get the field wanted
	 then the sed to get the data between the speech marks

git checkout -- data/file.java
	- brings back the version of the file before the changes you have saved
		- so the version of the file that exists in the last commit
		- works with HEAD^ for commit before last

git diff HEAD^ HEAD file_name.c
	- compare this commit with last commit version of file

git stash
git checkout branch123
git stash apply
	- working on wrong branch, stash change and apply


git reset --hard HEAD^
	- rollbacks by one commit and deletes the changes
git reset --soft HEAD^
	- rollbacks by one commit and keeps changes staged


<p>curl 'https://donjon.bin.sh/name/rpc.cgi?type=Elf+Male&n=10' -s | head -n 1

	- curl donjon and get top answer

npx mocha test/utilsTest.js
	- runs single file through the test

<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"/>
	- font awesome icons rel link

apt list --installed
	-list all installed apts

xargs
	 - lets you use STDout and pipe into programs like, rm, mkdir, echo and chmod
	- e.g. 			ls | xargs chmod 777

"CMD + SHIFT + ."
	- toggles visibility of hidden files and folders 

echo "test test test " | lolcat -F 0.5
	- enjoy the rainbow

mysql -h localhost -u root
	- Mysql terminal

sample='[{"name":"foo"},{"name":"bar"}]'
echo "${sample}" | jq -c '.[]'
	- JQ to read JSON in terminal

echo $PROMPT_COMMAND
	- get commands run after every command
	- for now its just : update_terminal_cwd

nvm alias default v8.7.0
	- set node version to default at 8.7.0

require.resolve('jsen')
	- find the path of a node module

node node_modules/nyc/bin/nyc.js report --reporter=html
	- Run npm module that is only installed locally
	- node LOCATION/module.js  . . . . 

php -S 127.0.0.1:8080
	-PHP version of in-built web server
python -m SimpleHTTPServer 8000
	- simple web server using python
python -m http.server 1337
	- simple web server PTYHON 3+
npm install http-server -g
http-server ./[yourfolder] -p 1337
	- Node simple web server

kotlinc nameOfFile.kt ... ... then
kotlin NameOfFile   (without kt, (.class))
	- to compile and run kotlin in command line

curl -X POST "http://localhost:3000/hello"
	- curl with post request
	(nodemon index.js)

npm list --depth=0 -g
	- npm print list of packages globally with depth 0 V Useful

open -a /Applications/Sublime\ Text.app/ ~/Desktop/todo_detailed
	- ON MACOS open application , sublime with file

for (( c=0; c<=$length; c++ ))
do
	echo "$c"
done
	- proper for loop using variable as length

for i in {16..21} {21..16} ; do echo -en "\033[48;5;${i}m \033[0m" ; done ; echo
	- display cool deeping blue effect

htpasswd -c .htpasswd cliff
	- make new htpasswd file containing clif

    https://www.edureka.co/blog/java-tutorial/?utm_source=quora&utm_medium=crosspost&utm_campaign=social-media-edureka-april-aj
- TEACH OOP LINKS
    https://www.edureka.co/blog/object-oriented-programming/?utm_source=blog&utm_medium=left-menu&utm_campaign=java-tutorial


echo "sam.bob.ben.cat" | awk -F'.' '{print$3}'
	- awk and prin the 3rd split element

cat -vet file
	- display true contents of a file, special characters

tr -d '\b\r' < your_file
	- delete carriage returns and backspaces from windows incoming file

~$find . -name webscrap* -maxdepth 2
	- from ~find the file in Desktop/

git branch -m new_name
	- rename the current branch

grep -rn . -e 'promot'
	- use grep to find in all files in dir a specifc pattern

git checkout -b LocalName origin/remotebranchname
	- makes a local branch of a remote branch
OR
git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
	- pulls all remote branches into local tracking branches


git config color.ui true
	- sets git to use colours properly

git log  --stat
git log --pretty --oneline --graph
	- display the proper graph of the git log nicely with lines and colours

Really important files located in the bashfun/ folder
	- makeUsers and delTrainingUsers (creates and deletes users)

git stash list
	- List the stashes

git stash drop stash@{n}
	- drops deletes a specific git stash

echo "$-"
if [[ $- == *i* ]] ;
then
  echo "intercact"
fi
	- Displays and checks if the shell is interactive:
		H - histexpand
		m - monitor
		h - hashall
		B - braceexpand
		i - interactive

adb shell screencap -p /sdcard/screen.png
adb pull /sdcard/screen.png
	- screenshot phone and takes fill from shell

while getopts u:d:p:f: option
do
 case "${option}"
 in
 u) USER=${OPTARG};;
 d) DATE=${OPTARG};;
 p) PRODUCT=${OPTARG};;
 f) FORMAT=$OPTARG;;
 esac
done
	- passing in parameters to a script

LS_COLORS:
a black
b red
c green
d brown
e blue
f magenta
g cyan
h light grey
A bold black, usually shows up as dark grey
B bold red
C bold green
D bold brown, usually shows up as yellow
E bold blue
F bold magenta
G bold cyan
H bold light grey; looks like bright white
x default foreground or background

first char is foreground
2nd is background
executable - hb    grey and red

1.   directory
2.   symbolic link
3.   socket
4.   pipe
5.   executable
6.   block special
7.   character special
8.   executable with setuid bit set
9.   executable with setgid bit set
10.  directory writable to others, with sticky bit
11.  directory writable to others, without sticky bit


echo $SHELL
!^      first argument
!$      last argument
!*      all arguments
!:2     second argument

!:2-3   second to third arguments
!:2-$   second to last arguments
!:2*    second to last arguments
!:2-    second to next to last arguments

!:0     the command
!!      repeat the previous line

/boot – Where the boot image files are stored
/mnt – The mount points for the partitions
/dev – Files of all the connected devices (USB, Printers)
/proc – Dynamic process information
/sys – Dynamic system configuration information
/var – Log files and system subdirectories
/tmp & /spool – Temporary files
/home – User accounts home directories
/usr & /user/local – A replicate tree for users and contains administrative tools
/bin & /sbin – Essential system executable files
/etc – System configuration files
/share – Common read only files
/lib & /include – Shared library files and system development

https://www.tutorialspoint.com/unix/unix-file-system.htm

For a file :

r = we can see the content of the file

w = we can modify the content

x = we can run the file using command "./<fileName>"

For a directory :
(You need read and exe permissions to enter a folder)
r = we can see contents of the directory

w = we can write files in a directory

x = we can use "cd <dirName>" command to enter into the directory

bashprofile
When you login (type username and password) via console, either sitting at the machine, or remotely via ssh: .bash_profile is executed to configure your shell before the initial command prompt.

INFO FOR PS1
bashrc
But, if you’ve already logged into your machine and open a new terminal window (xterm) then .bashrc is executed before the window command prompt. .bashrc is also run when you start a new bash instance by typing /bin/bash in a terminal.
\a : an ASCII bell character (07)
\d : the date in “Weekday Month Date” format (e.g., “Tue May 26”)
\D{format} :	the format is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-specific time representation. The braces are required
\e : an ASCII escape character (033)
\h : the hostname up to the first ‘.’
\H : the hostname
\j : the number of jobs currently managed by the shell
\l : the basename of the shellâ€™s terminal device name
\n : newline
\r : carriage return
\s : the name of the shell, the basename of $0 (the portion following the final slash)
\t : the current time in 24-hour HH:MM:SS format
\T : the current time in 12-hour HH:MM:SS format
\@ : the current time in 12-hour am/pm format
\A : the current time in 24-hour HH:MM format
\u : the username of the current user
\v : the version of bash (e.g., 2.00)
\V : the release of bash, version + patch level (e.g., 2.00.0)
\w : the current working directory, with $HOME abbreviated with a tilde
\W : the basename of the current working directory, with $HOME abbreviated with a tilde
\! : the history number of this command
\# : the command number of this command
\$ : if the effective UID is 0, a #, otherwise a $
\nnn : the character corresponding to the octal number nnn
\\ : a backslash
\[ : begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
\] : end a sequence of non-printing characters
